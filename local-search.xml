<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>利用C++实现5G协议数据包封装类</title>
    <link href="/2025/03/29/%E5%88%A9%E7%94%A8C-%E5%AE%9E%E7%8E%B05G%E5%8D%8F%E8%AE%AE%E6%95%B0%E6%8D%AE%E5%8C%85%E5%B0%81%E8%A3%85%E7%B1%BB/"/>
    <url>/2025/03/29/%E5%88%A9%E7%94%A8C-%E5%AE%9E%E7%8E%B05G%E5%8D%8F%E8%AE%AE%E6%95%B0%E6%8D%AE%E5%8C%85%E5%B0%81%E8%A3%85%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p>​</p><p> 目录</p><p>一.5G 协议数据包封装的用途</p><p>二.协议数据包封装的原理</p><p>  1.数据字段的划分</p><p>  2.序列化</p><p>  3.网络字节序的转换</p><p>  4.封装协议的定义</p><p>  5.反序列化</p><p>  6.校验和计算</p><p>三.5G协议数据包封装类代码实现</p><p>四.总结</p><h1 id="一-5G-协议数据包封装的用途"><a href="#一-5G-协议数据包封装的用途" class="headerlink" title="一.5G 协议数据包封装的用途"></a>一.5G 协议数据包封装的用途</h1><p><strong>协议数据包封装的目的是确保在不同的系统、设备和网络节点之间，数据可以按照一致的格式传输和解析。</strong></p><p>1.<strong>数据传输和通信</strong>：在 5G 网络中，数据传输是通过标准化的数据包格式进行的，数据包封装将数据按规定的格式打包，确保数据能够通过网络正确传输。</p><p>2.<strong>协议的标准化和一致性</strong>：5G 协议数据包封装为不同的设备和网络节点提供了统一的数据格式，使得无论是终端、基站，还是核心网络都可以理解和处理数据包。</p><p>3.<strong>数据包的完整性校验</strong>：封装过程中，除了包含数据外，还会计算校验和，确保数据在传输过程中没有发生损坏或篡改。接收端可以根据校验和检查数据包是否完整。</p><p>4.<strong>提升传输效率与网络安全</strong>：数据包封装不仅包含数据，还包含控制信息（如数据包的标识符、序列号等）。这些信息帮助接收端处理不同类型的数据，并支持数据的顺序恢复、错误检查和数据包重传，提升了网络效率和安全性。</p><p>5.<strong>分段和重组</strong>：如果数据过大，不能一次性传输，协议数据包封装能够将数据分割成多个小的数据包进行传输。接收端再根据协议进行重组，确保完整数据的恢复。</p><h1 id="二-协议数据包封装的原理"><a href="#二-协议数据包封装的原理" class="headerlink" title="二.协议数据包封装的原理"></a>二.协议数据包封装的原理</h1><p><img src="/img/5G.png" alt="图片描述"></p><p>这张图片展示了一个典型的 <strong>OSI七层模型</strong>（开放系统互联参考模型）的图示，其中每一层都有不同的功能和数据处理方式。可以看到，图中标出了从 <strong>应用层</strong> 到 <strong>物理层</strong> 的数据处理过程，并且展示了不同层级的数据包如何通过传输过程在物理媒介中传输。</p><p><strong>应用层</strong>（Application Layer）：在上层数据产生后，数据会先进入应用层，通常表示用户的应用程序生成的数据，如 HTTP 请求数据或用户输入数据。</p><p><strong>传输层</strong>（Transport Layer）：在传输层，数据包会被加入TCP、UDP等传输层协议的头部信息，如端口号、序列号等，这对应了我们5G协议数据包中的 <strong>包类型</strong> 和 <strong>时间戳</strong> 信息。</p><p><strong>网络层</strong>（Network Layer）：在网络层，数据包会包含 IP 头部信息，其中包括目标IP地址，这与协议数据包封装中的 <strong>协议版本</strong> 和 <strong>包类型</strong> 相似。</p><p><strong>数据链路层</strong>（Data Link Layer）：在数据链路层，数据包会加入 MAC 地址等信息（如MAC头部），并准备进行物理层的传输。对应的 5G 数据包中的<strong>载荷和校验和</strong>部分。</p><p><strong>物理层</strong>（Physical Layer）：最后，在物理层，数据被转换为电信号或光信号，通过物理媒介（如电缆或无线信号）进行传输。</p><h2 id="1-数据字段的划分："><a href="#1-数据字段的划分：" class="headerlink" title="1.数据字段的划分："></a><strong><strong>1.数据字段的划分</strong></strong>：</h2><p>每个协议数据包由多个字段组成，典型的字段包括：</p><p><strong>协议版本</strong>（Protocol Version）：表示数据包遵循的协议版本。</p><p><strong>包类型</strong>（Packet Type）：标识数据包的类型，如控制信息包、数据包等。</p><p><strong>时间戳</strong>（Timestamp）：记录数据包生成的时间，通常是一个 64 位的整数（例如 Unix 时间戳）。</p><p><strong>载荷</strong>（Payload）：包含实际的数据内容，这通常是传输的用户数据、请求、响应等。</p><p><strong>校验和</strong>（Checksum）：用于检测数据是否在传输过程中发生损坏或篡改。</p><h2 id="2-序列化："><a href="#2-序列化：" class="headerlink" title="2.序列化："></a>2.<strong><strong>序列化</strong></strong>：</h2><ul><li>序列化（Serialization）是将数据结构（如类、对象等）转换为字节流的过程。协议数据包封装类会将各个字段的数据按协议要求的格式组织起来并序列化，转换为一个字节流（std::vector&lt;uint8_t&gt;）。这个字节流可以通过网络或存储设备进行传输。</li></ul><h2 id="3-网络字节序的转换："><a href="#3-网络字节序的转换：" class="headerlink" title="3.网络字节序的转换："></a>3.<strong><strong>网络字节序的转换</strong></strong>：</h2><ul><li>网络通信中使用的是 <strong>大端字节序（Big Endian）</strong>，而不同的计算机可能使用不同的字节序（如小端字节序）。为了确保数据在不同系统间传输时不会出错，协议数据包封装类会进行 <strong>字节序转换</strong>，将数据按照大端字节序（网络字节序）进行排列。</li></ul><h2 id="4-封装协议的定义："><a href="#4-封装协议的定义：" class="headerlink" title="4.封装协议的定义："></a>4.<strong><strong>封装协议的定义</strong></strong>：</h2><ul><li>协议数据包的结构（如协议版本、包类型、载荷等）是根据特定通信协议来定义的。比如在 5G 网络中，可能会有不同类型的数据包，每种数据包的字段结构可能不同，因此需要定义一个符合协议的数据包封装类，确保每个字段的正确处理。</li></ul><h2 id="5-反序列化："><a href="#5-反序列化：" class="headerlink" title="5.反序列化："></a>5.<strong><strong>反序列化</strong></strong>：</h2><ul><li><strong>反序列化</strong>（Deserialization）是将字节流恢复成原始数据结构的过程。当接收方接收到序列化的数据包时，它会根据协议的定义，反序列化字节流，恢复出数据包的各个字段（协议版本、包类型、载荷等）。</li></ul><h2 id="6-校验和计算："><a href="#6-校验和计算：" class="headerlink" title="6.校验和计算："></a>6.<strong><strong>校验和计算</strong></strong>：</h2><ul><li>在数据包中加入 <strong>校验和</strong>（Checksum），用于在接收端校验数据是否正确。如果数据包在传输过程中发生了错误或损坏，校验和验证将失败，接收方会丢弃该数据包或请求重传。</li></ul><h1 id="三-5G协议数据包封装类代码实现"><a href="#三-5G协议数据包封装类代码实现" class="headerlink" title="三.5G协议数据包封装类代码实现"></a>三.5G协议数据包封装类代码实现</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdint&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;numeric&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdexcept&gt;</span></span><br><br><span class="hljs-comment">// 平台适配头文件，确保支持不同操作系统的网络功能</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;winsock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ws2tcpip.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib, <span class="hljs-string">&quot;Ws2_32.lib&quot;</span>)  <span class="hljs-comment">// 引入WinSock库</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span>  <span class="hljs-comment">// Unix系统的网络字节序函数</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">// 5G数据包类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FiveGDataPacket</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">uint8_t</span> protocol_version;  <span class="hljs-comment">// 协议版本（如NSA/SA架构标识）</span><br>    <span class="hljs-type">uint8_t</span> packet_type;       <span class="hljs-comment">// 数据包类型（控制面/用户面/管理面）</span><br>    <span class="hljs-type">uint64_t</span> timestamp;        <span class="hljs-comment">// 时间戳（纳秒级，用于时间敏感网络）</span><br>    std::vector&lt;<span class="hljs-type">uint8_t</span>&gt; payload; <span class="hljs-comment">// 有效载荷（加密后的用户数据）</span><br>    <span class="hljs-type">uint32_t</span> checksum;         <span class="hljs-comment">// 校验和（数据完整性保护）</span><br><br>    <span class="hljs-comment">// 计算数据包的校验和（通过对载荷的字节求和）</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">calculate_checksum</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        checksum = std::<span class="hljs-built_in">accumulate</span>(payload.<span class="hljs-built_in">begin</span>(), payload.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);<br>    &#125;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 构造函数，初始化5G数据包的各个成员</span><br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">FiveGDataPacket</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> ver = <span class="hljs-number">1</span>, <span class="hljs-type">uint8_t</span> type = <span class="hljs-number">0</span>, <span class="hljs-type">uint64_t</span> ts = <span class="hljs-number">0</span>, <span class="hljs-type">const</span> std::vector&lt;<span class="hljs-type">uint8_t</span>&gt;&amp; data = &#123;&#125;)</span></span><br><span class="hljs-function">        : protocol_version(ver),</span><br><span class="hljs-function">        packet_type(type),</span><br><span class="hljs-function">        timestamp(ts),</span><br><span class="hljs-function">        payload(data)</span><br><span class="hljs-function">    &#123;</span><br>        <span class="hljs-built_in">calculate_checksum</span>();  <span class="hljs-comment">// 初始化时计算校验和</span><br>    &#125;<br><br>    <span class="hljs-comment">// 拷贝构造函数</span><br>    <span class="hljs-built_in">FiveGDataPacket</span>(<span class="hljs-type">const</span> FiveGDataPacket&amp; other) = <span class="hljs-keyword">default</span>;<br><br>    <span class="hljs-comment">// 移动构造函数</span><br>    <span class="hljs-built_in">FiveGDataPacket</span>(FiveGDataPacket&amp;&amp; other) <span class="hljs-keyword">noexcept</span> = <span class="hljs-keyword">default</span>;<br><br>    <span class="hljs-comment">// 赋值运算符</span><br>    FiveGDataPacket&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> FiveGDataPacket&amp; other) = <span class="hljs-keyword">default</span>;<br><br>    <span class="hljs-comment">// 比较运算符，比较两个数据包是否相等</span><br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> FiveGDataPacket&amp; other) <span class="hljs-type">const</span><br>    &#123;<br>        <span class="hljs-built_in">return</span> (protocol_version == other.protocol_version) &amp;&amp;<br>            (packet_type == other.packet_type) &amp;&amp;<br>            (timestamp == other.timestamp) &amp;&amp;<br>            (payload == other.payload) &amp;&amp;<br>            (checksum == other.checksum);<br>    &#125;<br><br>    <span class="hljs-comment">// 序列化方法，将数据包转换为字节流（适用于网络传输或保存）</span><br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">uint8_t</span>&gt; <span class="hljs-title">serialize</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        std::vector&lt;<span class="hljs-type">uint8_t</span>&gt; buffer;<br><br>        buffer.<span class="hljs-built_in">push_back</span>(protocol_version);  <span class="hljs-comment">// 协议版本</span><br>        buffer.<span class="hljs-built_in">push_back</span>(packet_type);       <span class="hljs-comment">// 数据包类型</span><br><br>        <span class="hljs-comment">// 时间戳转换为网络字节序（大端字节序）</span><br>        <span class="hljs-type">uint64_t</span> net_timestamp = <span class="hljs-built_in">htonll</span>(timestamp);  <span class="hljs-comment">// 时间戳转网络字节序</span><br>        <span class="hljs-keyword">auto</span> ts_ptr = <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span>*&gt;(&amp;net_timestamp);<br>        buffer.<span class="hljs-built_in">insert</span>(buffer.<span class="hljs-built_in">end</span>(), ts_ptr, ts_ptr + <span class="hljs-number">8</span>);<br><br>        <span class="hljs-comment">// 载荷长度，转为网络字节序</span><br>        <span class="hljs-type">uint16_t</span> payload_length = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">uint16_t</span>&gt;(payload.<span class="hljs-built_in">size</span>());<br>        <span class="hljs-type">uint16_t</span> net_payload_len = <span class="hljs-built_in">htons</span>(payload_length);<br>        <span class="hljs-keyword">auto</span> len_ptr = <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span>*&gt;(&amp;net_payload_len);<br>        buffer.<span class="hljs-built_in">insert</span>(buffer.<span class="hljs-built_in">end</span>(), len_ptr, len_ptr + <span class="hljs-number">2</span>);<br><br>        buffer.<span class="hljs-built_in">insert</span>(buffer.<span class="hljs-built_in">end</span>(), payload.<span class="hljs-built_in">begin</span>(), payload.<span class="hljs-built_in">end</span>());  <span class="hljs-comment">// 插入有效载荷</span><br><br>        <span class="hljs-comment">// 校验和，转为网络字节序</span><br>        <span class="hljs-type">uint32_t</span> net_checksum = <span class="hljs-built_in">htonl</span>(checksum);<br>        <span class="hljs-keyword">auto</span> cs_ptr = <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span>*&gt;(&amp;net_checksum);<br>        buffer.<span class="hljs-built_in">insert</span>(buffer.<span class="hljs-built_in">end</span>(), cs_ptr, cs_ptr + <span class="hljs-number">4</span>);<br><br>        <span class="hljs-keyword">return</span> buffer;<br>    &#125;<br><br>    <span class="hljs-comment">// 反序列化静态方法，将字节流反转为5G数据包</span><br>    <span class="hljs-function"><span class="hljs-type">static</span> FiveGDataPacket <span class="hljs-title">deserialize</span><span class="hljs-params">(<span class="hljs-type">const</span> std::vector&lt;<span class="hljs-type">uint8_t</span>&gt;&amp; buffer)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (buffer.<span class="hljs-built_in">size</span>() &lt; <span class="hljs-number">16</span>) &#123;  <span class="hljs-comment">// 检查数据包大小是否合理</span><br>            <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">invalid_argument</span>(<span class="hljs-string">&quot;Invalid packet format&quot;</span>);<br>        &#125;<br><br>        FiveGDataPacket packet;<br>        <span class="hljs-type">size_t</span> pos = <span class="hljs-number">0</span>;<br><br>        packet.protocol_version = buffer[pos++];  <span class="hljs-comment">// 协议版本</span><br>        packet.packet_type = buffer[pos++];       <span class="hljs-comment">// 数据包类型</span><br><br>        <span class="hljs-comment">// 时间戳从网络字节序转换为主机字节序</span><br>        <span class="hljs-type">uint64_t</span> net_timestamp;<br>        std::<span class="hljs-built_in">copy</span>(buffer.<span class="hljs-built_in">begin</span>() + pos, buffer.<span class="hljs-built_in">begin</span>() + pos + <span class="hljs-number">8</span>,<br>            <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">uint8_t</span>*&gt;(&amp;net_timestamp));<br>        packet.timestamp = <span class="hljs-built_in">ntohll</span>(net_timestamp);  <span class="hljs-comment">// 网络字节序转主机字节序</span><br>        pos += <span class="hljs-number">8</span>;<br><br>        <span class="hljs-comment">// 载荷长度，从网络字节序转换</span><br>        <span class="hljs-type">uint16_t</span> net_payload_len;<br>        std::<span class="hljs-built_in">copy</span>(buffer.<span class="hljs-built_in">begin</span>() + pos, buffer.<span class="hljs-built_in">begin</span>() + pos + <span class="hljs-number">2</span>,<br>            <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">uint8_t</span>*&gt;(&amp;net_payload_len));<br>        <span class="hljs-type">uint16_t</span> payload_len = <span class="hljs-built_in">ntohs</span>(net_payload_len);  <span class="hljs-comment">// 网络字节序转主机字节序</span><br>        pos += <span class="hljs-number">2</span>;<br><br>        <span class="hljs-comment">// 检查载荷长度是否超出数据包大小</span><br>        <span class="hljs-keyword">if</span> (buffer.<span class="hljs-built_in">size</span>() &lt; pos + payload_len + <span class="hljs-number">4</span>) &#123;<br>            <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">invalid_argument</span>(<span class="hljs-string">&quot;Invalid payload length&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 获取有效载荷数据</span><br>        packet.payload.<span class="hljs-built_in">assign</span>(buffer.<span class="hljs-built_in">begin</span>() + pos,<br>            buffer.<span class="hljs-built_in">begin</span>() + pos + payload_len);<br>        pos += payload_len;<br><br>        <span class="hljs-comment">// 校验和，从网络字节序转换</span><br>        <span class="hljs-type">uint32_t</span> net_checksum;<br>        std::<span class="hljs-built_in">copy</span>(buffer.<span class="hljs-built_in">begin</span>() + pos, buffer.<span class="hljs-built_in">begin</span>() + pos + <span class="hljs-number">4</span>,<br>            <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">uint8_t</span>*&gt;(&amp;net_checksum));<br>        packet.checksum = <span class="hljs-built_in">ntohl</span>(net_checksum);  <span class="hljs-comment">// 网络字节序转主机字节序</span><br><br>        <span class="hljs-comment">// 校验和验证，确保数据完整性</span><br>        <span class="hljs-type">uint32_t</span> calculated_cs = std::<span class="hljs-built_in">accumulate</span>(packet.payload.<span class="hljs-built_in">begin</span>(),<br>            packet.payload.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (calculated_cs != packet.checksum) &#123;<br>            <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">runtime_error</span>(<span class="hljs-string">&quot;Checksum verification failed&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> packet;<br>    &#125;<br><br>    <span class="hljs-comment">// 流输出运算符，用于打印数据包内容</span><br>    <span class="hljs-keyword">friend</span> std::ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(std::ostream&amp; os, <span class="hljs-type">const</span> FiveGDataPacket&amp; pkt)<br>    &#123;<br>        os &lt;&lt; <span class="hljs-string">&quot;5G Packet [&quot;</span><br>            &lt;&lt; <span class="hljs-string">&quot;Ver: &quot;</span> &lt;&lt; <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(pkt.protocol_version)<br>            &lt;&lt; <span class="hljs-string">&quot;, Type: &quot;</span> &lt;&lt; <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(pkt.packet_type)<br>            &lt;&lt; <span class="hljs-string">&quot;, Timestamp: &quot;</span> &lt;&lt; pkt.timestamp<br>            &lt;&lt; <span class="hljs-string">&quot;, Payload Size: &quot;</span> &lt;&lt; pkt.payload.<span class="hljs-built_in">size</span>()<br>            &lt;&lt; <span class="hljs-string">&quot;, Checksum: 0x&quot;</span> &lt;&lt; std::hex &lt;&lt; pkt.checksum &lt;&lt; <span class="hljs-string">&quot;]&quot;</span>;<br>        <span class="hljs-keyword">return</span> os;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-comment">// 网络字节序（大端字节序）与主机字节序的转换函数</span><br>    <span class="hljs-comment">// 64位字节序转换（网络字节序转主机字节序）</span><br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">uint64_t</span> <span class="hljs-title">ntohll</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> value)</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">uint64_t</span>&gt;(<span class="hljs-built_in">ntohl</span>(value &amp; <span class="hljs-number">0xFFFFFFFF</span>)) &lt;&lt; <span class="hljs-number">32</span> |<br>            <span class="hljs-built_in">ntohl</span>(value &gt;&gt; <span class="hljs-number">32</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">be64toh</span>(value);  <span class="hljs-comment">// 在Unix平台上使用be64toh</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    &#125;<br><br>    <span class="hljs-comment">// 64位字节序转换（主机字节序转网络字节序）</span><br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">uint64_t</span> <span class="hljs-title">htonll</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> value)</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">uint64_t</span>&gt;(<span class="hljs-built_in">htonl</span>(value &amp; <span class="hljs-number">0xFFFFFFFF</span>)) &lt;&lt; <span class="hljs-number">32</span> |<br>            <span class="hljs-built_in">htonl</span>(value &gt;&gt; <span class="hljs-number">32</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">htobe64</span>(value);  <span class="hljs-comment">// 在Unix平台上使用htobe64</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 示例使用</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br>    <span class="hljs-comment">// Windows网络初始化</span><br>    WSADATA wsaData;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">WSAStartup</span>(<span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), &amp;wsaData) != <span class="hljs-number">0</span>) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;WSAStartup failed&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 创建测试数据包</span><br>        <span class="hljs-function">std::vector&lt;<span class="hljs-type">uint8_t</span>&gt; <span class="hljs-title">test_data</span><span class="hljs-params">(<span class="hljs-number">300</span>, <span class="hljs-number">0xAA</span>)</span></span>; <span class="hljs-comment">// 300字节测试数据</span><br>        <span class="hljs-function">FiveGDataPacket <span class="hljs-title">original</span><span class="hljs-params">(<span class="hljs-number">2</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">1609459200000</span>, test_data)</span></span>;  <span class="hljs-comment">// 创建数据包</span><br><br>        <span class="hljs-comment">// 序列化</span><br>        <span class="hljs-keyword">auto</span> serialized = original.<span class="hljs-built_in">serialize</span>();<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Serialized size: &quot;</span> &lt;&lt; serialized.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-string">&quot; bytes\n&quot;</span>;  <span class="hljs-comment">// 打印序列化后数据包大小</span><br><br>        <span class="hljs-comment">// 反序列化</span><br>        FiveGDataPacket reconstructed = FiveGDataPacket::<span class="hljs-built_in">deserialize</span>(serialized);<br><br>        <span class="hljs-comment">// 验证</span><br>        <span class="hljs-keyword">if</span> (original == reconstructed) &#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;Operation successful!\n&quot;</span>;  <span class="hljs-comment">// 如果数据包一致，说明操作成功</span><br>            std::cout &lt;&lt; reconstructed &lt;&lt; std::endl;  <span class="hljs-comment">// 打印反序列化后的数据包信息</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">catch</span> (<span class="hljs-type">const</span> std::exception&amp; e) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;Error: &quot;</span> &lt;&lt; e.<span class="hljs-built_in">what</span>() &lt;&lt; std::endl;  <span class="hljs-comment">// 捕获并输出异常信息</span><br>    &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br>    <span class="hljs-built_in">WSACleanup</span>();  <span class="hljs-comment">// Windows平台的网络清理</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="四-总结"><a href="#四-总结" class="headerlink" title="四.总结"></a>四.总结</h1><p><strong>1.复习回归</strong>：构造函数、<vector>容器、拷贝构造函数、运算符重载、static关键字、</p><p><strong>2.新学内容</strong>：构造函数的初始化列表来初始化成员变量、accumulate(first, last, init)函数、explicit 关键字、移动构造函数、赋值运算符与默认拷贝构造函数的区别、htonll() 函数、htons（）、htonll()、htonl（）区别、reinterpret_cast&lt;&gt; 介绍、throw 关键字、std::invalid_argument 类、std::invalid_argument 类、输出流运算符（operator&lt;&lt;）</p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
      <tag>数据包</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用C++实现CRC校验</title>
    <link href="/2025/03/21/%E5%88%A9%E7%94%A8C-%E5%AE%9E%E7%8E%B0CRC%E6%A0%A1%E9%AA%8C/"/>
    <url>/2025/03/21/%E5%88%A9%E7%94%A8C-%E5%AE%9E%E7%8E%B0CRC%E6%A0%A1%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<p>​<br>前言</p><p>一、CRC校验用途</p><p> 1.1 通信协议与数据传输</p><p> 1.2 存储设备</p><p> 1.3 工业控制与嵌入式系统</p><p> 1.4 软件与文件完整性</p><p> 1.5 科学计算 &amp; 深空探测</p><p> 小结</p><p>二、CRC校验原理</p><p> 2.1 CRC 的校验本质</p><p> 2.2 CRC 校验的核心步骤</p><p>  （1）选择 CRC 生成多项式</p><p>  （2）发送端计算 CRC 码</p><p>  （3）接收端校验</p><p> 2.3 CRC 二进制除法示例</p><p>三、CRC校验代码实现步骤</p><p>1.选择合适的多项式</p><p>2. 初始化 CRC 寄存器</p><p>3. 预处理数据</p><p>4. 逐位计算 CRC</p><p>5. 后处理 CRC</p><p>6. 输出 CRC 校验码</p><p>四、CRC校验代码（以CRC-4为例）</p><p>五、总结</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>CRC校验可以作为c++学习过程中的小项目，帮助我们更好的将c++学习中的理论知识和实践相结合，本项目中的CRC校验代码，涉及<strong>基础语法、位运算、条件判断、循环控制、函数、类型转换</strong>等。本篇文章从<strong>CRC校验的用途、CRC校验代码实现原理、CRC校验代码</strong>三方面展开。</p><h1 id="一、CRC校验用途"><a href="#一、CRC校验用途" class="headerlink" title="一、CRC校验用途"></a>一、CRC校验用途</h1><p>CRC（循环冗余校验，Cyclic Redundancy Check）是一种<strong>高效的错误检测技术</strong>，它的主要作用是<strong>检测数据传输或存储过程中可能发生的错误</strong>，确保数据的完整性。下面介绍 CRC 在各个领域的<strong>实际用途</strong>。</p><h3 id="1-1-通信协议与数据传输"><a href="#1-1-通信协议与数据传输" class="headerlink" title="1.1 通信协议与数据传输"></a>1.1 <strong><strong>通信协议与数据传输</strong></strong></h3><ul><li><strong>网络通信</strong>：在 <strong>以太网 (Ethernet)</strong>、<strong>Wi-Fi</strong> 等协议中，数据包都会附带 CRC 校验码，接收端对其进行计算并校验数据是否完整。如果 CRC 校验失败，则表示数据包在传输过程中出现错误，需要 <strong>请求重传 (ARQ)</strong> 或 <strong>丢弃错误数据</strong>。以太网 (Ethernet)主要使用CRC-32检测数据帧中的错误。</li><li><strong>无线通信</strong>：在无线环境下，数据容易受 <strong>信号干扰、噪声、抖动</strong> 等影响，因此 CRC 被用于数据包的错误检测。<strong>5G NR（New Radio）</strong> 使用 <strong>CRC-24</strong> 进行数据完整性校验，以减少误码率。蓝牙 (Bluetooth)、ZigBee、LoRa 等无线通信协议中，通常使用 CRC-8 或 CRC-16进行校验。</li><li><strong>数据链路层协议</strong>：在 <strong>HDLC、PPP（点对点协议）、CAN 总线</strong> 等数据链路层协议中，使用 <strong>CRC-16 或 CRC-32</strong> 进行数据帧的完整性校验。CAN 总线（用于汽车、工业自动化）使用 CRC-15开展校验，USB 协议 采用 CRC-5 和 CRC-16进行数据包的错误检测。</li></ul><h3 id="1-2-存储设备"><a href="#1-2-存储设备" class="headerlink" title="1.2 存储设备"></a>1.2 存储设备</h3><ul><li><strong>硬盘、SSD、RAID 纠错</strong>：在 <strong>机械硬盘 (HDD)</strong> 和 <strong>固态硬盘 (SSD)</strong> 读取数据时，数据可能因 <strong>磁场干扰、坏扇区</strong> 等原因而发生错误，因此使用 <strong>CRC 校验</strong> 来检测数据损坏。<strong>RAID（冗余阵列磁盘）</strong> 采用 CRC 结合 <strong>ECC（纠错码）</strong> 确保数据存储的可靠性。</li><li><strong>光盘 (CD&#x2F;DVD) 读取：CD、DVD、Blu-ray</strong> 盘片存储的数据容易受划痕、老化、光学误差影响，因此采用 CRC 进行错误检测，并结合 <strong>Reed-Solomon 纠错码</strong> 修复错误。</li></ul><h3 id="1-3-工业控制与嵌入式系统"><a href="#1-3-工业控制与嵌入式系统" class="headerlink" title="1.3 工业控制与嵌入式系统"></a>1.3 工业控制与嵌入式系统</h3><ul><li><strong>物联网（IoT）、嵌入式设备</strong>：物联网 (IoT) 设备，如 <strong>智能传感器、无线模块、智能家居设备</strong>，使用 CRC 校验数据完整性，避免错误数据导致系统失效。</li><li><strong>汽车电子（车载网络 CAN 总线）</strong>：现代汽车的 ECU（电子控制单元）、传感器、自动驾驶系统 都依赖 <strong>CAN 总线</strong> 进行通信。<strong>CAN 总线使用 CRC-15</strong> 进行数据帧校验，防止错误命令导致汽车故障。</li></ul><h3 id="1-4-软件与文件完整性"><a href="#1-4-软件与文件完整性" class="headerlink" title="1.4 软件与文件完整性"></a>1.4 软件与文件完整性</h3><ul><li><strong>数据文件传输校验</strong>：在文件下载或传输过程中，使用 CRC 校验文件的完整性，防止文件损坏或篡改。</li><li><strong>数字签名 &amp; 数据防篡改</strong>：CRC 可用于检测数据篡改，确保文件或数据包在存储或传输过程中未被恶意修改。<strong>区块链技术</strong>（Bitcoin、Ethereum）在交易数据中使用 <strong>哈希 + CRC 机制</strong> 检查数据完整性。<strong>银行 ATM 交易</strong> 采用 <strong>CRC-16 或 CRC-32</strong> 进行 PIN 码数据完整性校验。</li><li><strong>软件校验</strong>：某些软件使用 CRC 校验自身代码是否被恶意修改。<strong>游戏反作弊系统</strong> 通过 CRC 检测游戏文件是否被修改，如 <strong>VAC（Valve 反作弊系统）</strong>。<strong>Windows PE 文件校验</strong> 通过 CRC-32 计算 PE 头部，防止病毒篡改系统文件。</li></ul><h3 id="1-5-科学计算-深空探测"><a href="#1-5-科学计算-深空探测" class="headerlink" title="1.5 科学计算 &amp; 深空探测"></a>1.5 科学计算 &amp; 深空探测</h3><ul><li><strong>NASA 深空探测</strong>：在深空探测任务（如 <strong>火星探测器、哈勃望远镜</strong>）中，由于数据传输距离极远，CRC 与 <strong>Forward Error Correction (FEC)</strong> 结合，确保数据可靠传输。</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/img/CRC4.png" alt="图片描述"></p><h1 id="二、CRC校验原理"><a href="#二、CRC校验原理" class="headerlink" title="二、CRC校验原理"></a>二、CRC校验原理</h1><h2 id="2-1-CRC-的校验本质"><a href="#2-1-CRC-的校验本质" class="headerlink" title="2.1 CRC 的校验本质"></a>2.1 CRC 的校验本质</h2><p><span style="color: red; background-color: yellow;"><strong>数据被视为一个二进制数，选择一个固定的 CRC 生成多项式（比如 <strong>x^4 + x + 1</strong>），然后使用二进制除法（不进位） 计算出余数（即 CRC 校验码）。将余数附加到数据后面，接收方可以通过相同的计算过程来检查数据是否正确。</strong> <span style="color: red; background-color: yellow;"></p><h2 id="2-2-CRC-校验的核心步骤"><a href="#2-2-CRC-校验的核心步骤" class="headerlink" title="2.2 CRC 校验的核心步骤"></a>2.2 CRC 校验的核心步骤</h2><h3 id="（1）选择-CRC-生成多项式"><a href="#（1）选择-CRC-生成多项式" class="headerlink" title="（1）选择 CRC 生成多项式"></a>（1）选择 CRC 生成多项式</h3><p>下图是常用的CRC模型，参照红框。通信双方可以约定一个相同的多项式。<br><img src="/img/CRC1.png" alt="图片描述"><br><strong>其中：</strong></p><ul><li>width是CRC码的位宽；</li><li>poly是省略最高位的多项式，因为更利于编程实现，即移位之后不需要考虑最高位；</li><li>init是CRC码初始值，因为原始数据可能以不同位数的0开头，所以需要设置初始值来区分；</li><li>refin是输入逆向标志位，这里为真，表示输入数据需要先进行逆向（即按位倒序），再进行后续运算；</li><li>refout是输出逆向标志位，这里为真，表示CRC码需要先进行逆向（即按位倒序），再输出；</li><li>xorout是输出异或值，是输出CRC码前与其进行异或运算的数；</li></ul><h3 id="（2）发送端计算-CRC-码"><a href="#（2）发送端计算-CRC-码" class="headerlink" title="（2）发送端计算 CRC 码"></a>（2）发送端计算 CRC 码</h3><ul><li>将数据看作一个二进制数，假设发送 1011001（7 位）。</li><li>在数据后面添加 4 个 0（因为使用 CRC-4），变成 10110010000（11 位）。</li><li>用二进制除法（不进位） 计算 余数： 用 10110010000 除以 0011，得到余数（例如 0110）。</li><li>将余数 0110 附加到数据末尾，得到 10110010110。</li></ul><h3 id="（3）接收端校验"><a href="#（3）接收端校验" class="headerlink" title="（3）接收端校验"></a>（3）接收端校验</h3><p> 接收端收到 10110010110，用相同的 二进制除法 计算 CRC 余数：</p><ul><li>如果余数为 0000，表示数据未出错 。</li><li>如果余**数 不为 **0000，表示数据出错 。</li></ul><h2 id="2-3-CRC-二进制除法示例"><a href="#2-3-CRC-二进制除法示例" class="headerlink" title="2.3 CRC 二进制除法示例"></a>2.3 CRC 二进制除法示例</h2><p><img src="/img/CRC2.png" alt="图片描述"></p><h1 id="三、CRC校验代码实现步骤"><a href="#三、CRC校验代码实现步骤" class="headerlink" title="三、CRC校验代码实现步骤"></a>三、CRC校验代码实现步骤</h1><p><span style="color: red;">注意实际编程时并不直接使用上述方法，以下是编程实现步骤:</span></p><h3 id="1-选择合适的多项式"><a href="#1-选择合适的多项式" class="headerlink" title="1.选择合适的多项式"></a><strong><strong>1.选择合适的多项式</strong></strong></h3><ul><li>CRC 校验的第一步是选择一个“生成多项式”。这个多项式决定了 CRC 计算的规则，不同的应用可能会选择不同的多项式。例如，CRC-16、CRC-32 分别使用不同的多项式。</li><li>多项式通常以标准形式给出，如 CRC-16-CCITT 使用的是 0x1021。</li></ul><h3 id="2-初始化-CRC-寄存器"><a href="#2-初始化-CRC-寄存器" class="headerlink" title="2. 初始化 CRC 寄存器"></a>2. <strong><strong>初始化 CRC 寄存器</strong></strong></h3><ul><li>CRC 计算开始前，CRC 寄存器（通常是一个与多项式位宽相同的寄存器）被初始化，常见的初始化值有全0或全1。</li></ul><h3 id="3-预处理数据"><a href="#3-预处理数据" class="headerlink" title="3. 预处理数据"></a>3. <strong><strong>预处理数据</strong></strong></h3><ul><li>根据具体的 CRC 类型，可能需要对数据进行预处理，如反转数据位（反射）。</li></ul><h3 id="4-逐位计算-CRC"><a href="#4-逐位计算-CRC" class="headerlink" title="4. 逐位计算 CRC"></a>4. 逐位计算 CRC</h3><ul><li>数据的每一位被逐一处理。每处理一个数据位，CRC 寄存器左移一位（模拟除法中的移位），并根据数据位决定是否执行 <strong>多项式异或。</strong></li><li>如果 CRC 最高位为 1，则与多项式进行异或运算。</li></ul><h3 id="5-后处理-CRC"><a href="#5-后处理-CRC" class="headerlink" title="5. 后处理 CRC"></a>5. <strong><strong>后处理 CRC</strong></strong></h3><ul><li>根据特定的 CRC 标准，可能需要对最终的 CRC 寄存器进行后处理，例如可能需要再次进行位反射。</li><li>最终的 CRC 值可能还会与一个最终的异或值进行异或，以得到最终的 CRC 校验码。</li></ul><p>note:此步骤是否执行需要参照下图红框<br><img src="/img/CRC5.png" alt="图片描述"></p><h3 id="6-输出-CRC-校验码"><a href="#6-输出-CRC-校验码" class="headerlink" title="6. 输出 CRC 校验码"></a>6. 输出 CRC 校验码</h3><ul><li>确保 CRC 结果为所需的位数（例如 CRC-4 需要 4 位），将最终的 CRC 校验码作为结果返回。</li></ul><h1 id="四、CRC校验代码（以CRC-4为例）"><a href="#四、CRC校验代码（以CRC-4为例）" class="headerlink" title="四、CRC校验代码（以CRC-4为例）"></a><strong><strong>四、CRC校验代码（以CRC-4为例）</strong></strong></h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iomanip&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdexcept&gt;</span>  <span class="hljs-comment">// 用于异常处理</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// CRC-4 校验参数</span><br><span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> CRC_POLYNOMIAL = <span class="hljs-number">0x3</span>;  <span class="hljs-comment">// CRC-4 的多项式（x^4 + x + 1），十六进制为 0x3</span><br><span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> CRC_INITIAL_VALUE = <span class="hljs-number">0x0</span>; <span class="hljs-comment">// 初始值</span><br><span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> CRC_XOR_OUT = <span class="hljs-number">0x0</span>;       <span class="hljs-comment">// 反向输出，通常为 0</span><br><br><span class="hljs-comment">// 反转输入数据的函数</span><br><span class="hljs-function"><span class="hljs-type">uint8_t</span> <span class="hljs-title">reflect</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> data)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">uint8_t</span> reflected = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (data &amp; (<span class="hljs-number">1</span> &lt;&lt; i)) &#123;<br>            reflected |= (<span class="hljs-number">1</span> &lt;&lt; (<span class="hljs-number">7</span> - i));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> reflected;<br>&#125;<br><span class="hljs-comment">// 计算 CRC-4 校验</span><br><span class="hljs-function"><span class="hljs-type">uint8_t</span> <span class="hljs-title">calculateCRC4</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> data, <span class="hljs-type">bool</span> reflectInput, <span class="hljs-type">bool</span> reflectOutput)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">uint8_t</span> crc = CRC_INITIAL_VALUE;<br>    <span class="hljs-comment">// 如果反转输入数据</span><br>    <span class="hljs-keyword">if</span> (reflectInput)<br>    &#123;<br>        data = <span class="hljs-built_in">reflect</span>(data); <span class="hljs-comment">// 反转 8 位数据</span><br>    &#125;<br>    <span class="hljs-comment">// 进行 CRC 计算</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)<br>    &#123;<br>        <span class="hljs-type">bool</span> bit = (data &gt;&gt; (<span class="hljs-number">7</span> - i)) &amp; <span class="hljs-number">1</span>;  <span class="hljs-comment">// 提取数据的当前位</span><br>        crc &lt;&lt;= <span class="hljs-number">1</span>; <span class="hljs-comment">// CRC 左移，准备处理下一个数据位</span><br><br>        <span class="hljs-keyword">if</span> (bit) <br>        &#123; <span class="hljs-comment">// 如果当前数据位是 1，将其加入 CRC</span><br>            crc |= <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (crc &amp; <span class="hljs-number">0x08</span>) <br>        &#123; <span class="hljs-comment">// 如果最高位是 1，执行多项式异或</span><br>            crc ^= CRC_POLYNOMIAL;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 如果反转输出数据</span><br>    <span class="hljs-keyword">if</span> (reflectOutput) <br>    &#123;<br>        crc = <span class="hljs-built_in">reflect</span>(crc); <span class="hljs-comment">// 只反转 4 位，而不是 8 位！</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> crc &amp; <span class="hljs-number">0x0F</span>;  <span class="hljs-comment">// 确保 CRC 结果为 4 位</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string hexInput;<br>    <span class="hljs-type">bool</span> reflectInput, reflectOutput;<br>    <span class="hljs-type">int</span> tempData;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入十六进制数据（例如：1A）：&quot;</span>;<br>    cin &gt;&gt; hexInput;<br><br>    <span class="hljs-comment">// 处理问题1：异常捕获，防止非十六进制输入</span><br>    <span class="hljs-keyword">try</span> <br>    &#123;<br>        tempData = <span class="hljs-built_in">stoi</span>(hexInput, <span class="hljs-literal">nullptr</span>, <span class="hljs-number">16</span>);  <span class="hljs-comment">//将用户输入的十六进制字符串转换为十进制整数</span><br>    &#125;<br>    <span class="hljs-built_in">catch</span> (<span class="hljs-type">const</span> invalid_argument&amp; e)  <br>    &#123;<br>        cerr &lt;&lt; <span class="hljs-string">&quot;输入错误: 请输入有效的十六进制数！&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 退出程序</span><br>    &#125;<br>    <span class="hljs-built_in">catch</span> (<span class="hljs-type">const</span> out_of_range&amp; e)<br>    &#123;<br>        cerr &lt;&lt; <span class="hljs-string">&quot;输入超出范围: 请输入 0x00 - 0xFF 之间的十六进制数！&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 退出程序</span><br>    &#125;<br><br>    <span class="hljs-comment">// 处理问题 2：防止数据溢出 uint8_t</span><br>    <span class="hljs-keyword">if</span> (tempData &gt; <span class="hljs-number">255</span>)<br>    &#123;<br>        cerr &lt;&lt; <span class="hljs-string">&quot;输入值超出范围！请输入 0x00 - 0xFF 之间的数。&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 退出程序</span><br>    &#125;<br>    <span class="hljs-comment">// 安全转换为 uint8_t</span><br>    <span class="hljs-type">uint8_t</span> data = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">uint8_t</span>&gt;(tempData);<br>    cout &lt;&lt; <span class="hljs-string">&quot;是否反转输入数据？(0: 否, 1: 是): &quot;</span>;<br>    cin &gt;&gt; reflectInput;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;是否反转输出数据？(0: 否, 1: 是): &quot;</span>;<br>    cin &gt;&gt; reflectOutput;<br><br>    <span class="hljs-comment">// 计算 CRC 校验码</span><br>    <span class="hljs-type">uint8_t</span> crc = <span class="hljs-built_in">calculateCRC4</span>(data, reflectInput, reflectOutput);<br><br>    <span class="hljs-comment">// 输出结果</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;计算得到的CRC-4 校验码为: &quot;</span> &lt;&lt; hex &lt;&lt; uppercase &lt;&lt; (<span class="hljs-type">int</span>)crc &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>以下是运行结果示例：<br><img src="/img/CRC3.png" alt="图片描述"></p><h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>1.系统性的了解了CRC校验的用途、原理、编程实现，深刻理解了CRC校验的本质。</p><p>2.对于c++学习：</p><p><strong>（1）学习了两个头文件iomanip 、stdexcept</strong> 。其中：</p><p> <iomanip>（I&#x2F;O 操作库）主要用于 <strong>控制输出格式：</strong></p><ul><li>设置十六进制输出格式（hex）</li><li>大写字母格式（uppercase）</li><li>设置输出宽度和填充字符（setw()、setfill()）</li></ul><p>  <stdexcept>是 C++ 标准库中的 <strong>异常处理头文件：</strong></p><ul><li>std::invalid_argument <strong>（无效参数异常）</strong></li><li>std::out_of_range <strong>（超出范围异常）</strong></li><li>std::runtime_error <strong>（运行时错误异常）</strong></li></ul><p>这些异常可以用 throw 抛出，也可以用** **try-catch 语句捕获，防止程序崩溃。</p><p>（2）<strong>数据类型:uint8_t</strong></p><p>使用 uint8_t（无符号 8 位整数）来定义 CRC_POLYNOMIAL（CRC 多项式）的原因是为了确保在内存中占用最小的空间，并且它的范围适合存储 CRC 多项式值。</p><p>（3）<strong>反转函数中的位运算符</strong></p><p>reflected：作为存储反转后的数据&#x2F;&#x2F;data &amp; (1 &lt;&lt; i)： 用于检查 data 的第i位是否为1 这里”1”二进制数为0000 0001&#x2F;reflected |&#x3D; (1 &lt;&lt; (7 - i))：这里一定要用 “|&#x3D;” (按位或赋值运算符)，若使用”&#x3D;”,下次循环新的reflected会覆盖上一轮的结果。</p><p>（4）<strong>^&#x3D; 表示异或运算</strong></p><p>（5）<strong>static_cast<T>()</strong>: static_cast<T>(value) 是 C++ <strong>最常用的类型转换操作</strong></p><ul><li>显式转换不同类型的数据（如 int → uint8_t）。</li><li>确保转换是安全的（编译时进行检查）。</li><li>不会影响底层数据的存储方式。</li></ul><p><strong>为什么不直接使用 uint8_t data &#x3D; tempData;?</strong><br>tempData 是 int 类型（32 位），直接赋值给 uint8_t（8 位）时，可能产生溢出。</p><p>​</p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++项目</tag>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客更新日志</title>
    <link href="/2025/03/21/%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/"/>
    <url>/2025/03/21/%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/</url>
    
    <content type="html"><![CDATA[<h2 id="新增功能"><a href="#新增功能" class="headerlink" title="新增功能"></a>新增功能</h2><h3 id="2025年3月21日-更新两篇文章"><a href="#2025年3月21日-更新两篇文章" class="headerlink" title="2025年3月21日 更新两篇文章"></a>2025年3月21日 <strong>更新两篇文章</strong></h3><h3 id="2025年3月21日-新增评论区功能"><a href="#2025年3月21日-新增评论区功能" class="headerlink" title="2025年3月21日 新增评论区功能"></a>2025年3月21日 <strong>新增评论区功能</strong></h3><p>方法：<br>(1) 使用LeanCloud可以在后台查看评论，并可以修改评论权限<br>(2) 在fluid _config 中将评论区设置选择为使用valine,之后更改valine模块中相应的设置。</p><h3 id="2025年3月19日-更新页面图片和相应文字"><a href="#2025年3月19日-更新页面图片和相应文字" class="headerlink" title="2025年3月19日 更新页面图片和相应文字"></a>2025年3月19日 <strong>更新页面图片和相应文字</strong></h3><p>在fluid _config 寻找相应的模块更改即可。</p>]]></content>
    
    
    <categories>
      
      <category>更新日志</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日志</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 写作语法速查表</title>
    <link href="/2025/03/20/Hexo%E5%86%99%E4%BD%9C%E8%AF%AD%E6%B3%95%E9%80%9F%E6%9F%A5%E8%A1%A8/"/>
    <url>/2025/03/20/Hexo%E5%86%99%E4%BD%9C%E8%AF%AD%E6%B3%95%E9%80%9F%E6%9F%A5%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="一、基础写作指令"><a href="#一、基础写作指令" class="headerlink" title="一、基础写作指令"></a>一、基础写作指令</h2><p>新建文章：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;文章标题&quot;</span><br></code></pre></td></tr></table></figure><p>文章头部信息（YAML 格式）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">我的第一篇博客</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2025-03-20 22:00:00</span><br><span class="hljs-attr">categories:</span> <span class="hljs-string">技术分享</span><br><span class="hljs-attr">tags:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">C++</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">CRC</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">简要介绍文章内容</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><hr><h2 id="二、插入图片"><a href="#二、插入图片" class="headerlink" title="二、插入图片"></a>二、插入图片</h2><p><strong>方式 1：网络图链接</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">图片描述</span>](<span class="hljs-link">https://example.com/image.jpg</span>)<br></code></pre></td></tr></table></figure><p><strong>方式 2：本地图片</strong><br>将图片放到 <code>source/images/</code> 目录下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">CRC原理图</span>](<span class="hljs-link">/images/crc-diagram.png</span>)<br></code></pre></td></tr></table></figure><hr><h2 id="三、插入代码块"><a href="#三、插入代码块" class="headerlink" title="三、插入代码块"></a>三、插入代码块</h2><p><strong>推荐语法：使用 Markdown 三个反引号</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-code">```cpp</span><br><span class="hljs-code">uint8_t reflect(uint8_t data) &#123;</span><br><span class="hljs-code">    uint8_t reflected = 0;</span><br><span class="hljs-code">    for (int i = 0; i &lt; 8; i++) &#123;</span><br><span class="hljs-code">        if (data &amp; (1 &lt;&lt; i)) &#123;</span><br><span class="hljs-code">            reflected |= (1 &lt;&lt; (7 - i));</span><br><span class="hljs-code">        &#125;</span><br><span class="hljs-code">    &#125;</span><br><span class="hljs-code">    return reflected;</span><br><span class="hljs-code">&#125;</span><br><span class="hljs-code">```</span><br></code></pre></td></tr></table></figure><hr><h2 id="四、文本样式与颜色"><a href="#四、文本样式与颜色" class="headerlink" title="四、文本样式与颜色"></a>四、文本样式与颜色</h2><p><strong>加粗 &#x2F; 斜体 &#x2F; 删除线</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**加粗**</span><br><span class="hljs-emphasis">*斜体*</span><br>~~删除线~~<br></code></pre></td></tr></table></figure><p><strong>红色文本 &#x2F; 黄底文本</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:red;&quot;</span>&gt;</span>红色文本<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color:yellow;&quot;</span>&gt;</span>黄底文本<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>组合效果</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:white; background-color:green;&quot;</span>&gt;</span>高亮代码<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h2 id="五、引用、列表、表格"><a href="#五、引用、列表、表格" class="headerlink" title="五、引用、列表、表格"></a>五、引用、列表、表格</h2><p><strong>引用块</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-quote">&gt; 引用内容</span><br></code></pre></td></tr></table></figure><p><strong>无序列表</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 项目一<br><span class="hljs-bullet">-</span> 项目二<br></code></pre></td></tr></table></figure><p><strong>有序列表</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 步骤一<br><span class="hljs-bullet">2.</span> 步骤二<br></code></pre></td></tr></table></figure><p><strong>表格</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">| 名称 | 说明         |<br>|------|--------------|<br>| CRC  | 循环冗余校验 |<br>| Hexo | 博客框架     |<br></code></pre></td></tr></table></figure><hr><h2 id="六、分割线"><a href="#六、分割线" class="headerlink" title="六、分割线"></a>六、分割线</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br></code></pre></td></tr></table></figure><hr><h2 id="七、Hexo-主题支持组件（以-Fluid-为例）"><a href="#七、Hexo-主题支持组件（以-Fluid-为例）" class="headerlink" title="七、Hexo 主题支持组件（以 Fluid 为例）"></a>七、Hexo 主题支持组件（以 Fluid 为例）</h2><p><strong>提示&#x2F;警告块</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% note info %&#125;<br>这是一个信息提示。<br>&#123;% endnote %&#125;<br><br>&#123;% note warning %&#125;<br>这是一个警告信息。<br>&#123;% endnote %&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="八、插入特殊字符"><a href="#八、插入特殊字符" class="headerlink" title="八、插入特殊字符"></a>八、插入特殊字符</h2><ul><li>小于号 <code>&lt;</code> 用 <code>&amp;lt;</code></li><li>大于号 <code>&gt;</code> 用 <code>&amp;gt;</code></li><li>空格 <code>&amp;nbsp;</code></li><li>换行 <code>&lt;br&gt;</code></li></ul><hr><h2 id="九、常用-Hexo-命令回顾"><a href="#九、常用-Hexo-命令回顾" class="headerlink" title="九、常用 Hexo 命令回顾"></a>九、常用 Hexo 命令回顾</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 初始化</span><br>hexo init blog<br><span class="hljs-built_in">cd</span> blog<br>npm install<br><br><span class="hljs-comment"># 写作</span><br>hexo new <span class="hljs-string">&quot;标题&quot;</span><br>hexo clean<br>hexo g<br>hexo s<br><br><span class="hljs-comment"># 部署</span><br>npm install hexo-deployer-git --save<br>hexo d<br><br><span class="hljs-comment"># 其它</span><br>git init<br>ssh -T git@github.com<br></code></pre></td></tr></table></figure><h1 id="快捷"><a href="#快捷" class="headerlink" title="快捷"></a>快捷</h1><h2 id="hexo-clean-hexo-g-hexo-shexo-clean-hexo-g-hexo-d"><a href="#hexo-clean-hexo-g-hexo-shexo-clean-hexo-g-hexo-d" class="headerlink" title="hexo clean &amp;&amp; hexo g &amp;&amp; hexo shexo clean &amp;&amp; hexo g &amp;&amp; hexo d"></a>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s<br>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</h2>]]></content>
    
    
    <categories>
      
      <category>工具教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
      <tag>博客写作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的博客，我的小家</title>
    <link href="/2025/03/20/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2025/03/20/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="欢迎来到我的博客"><a href="#欢迎来到我的博客" class="headerlink" title="欢迎来到我的博客"></a>欢迎来到我的博客</h2><p>在这个信息爆炸、节奏飞快的时代，我们每天刷着短视频、看着热搜、为别人生活点赞，却很少停下来真正与自己对话。写博客，是一种向内探索的方式，是我为自己在数字世界里搭建的一个「精神角落」。</p><h2 id="博客于我，不只是写字"><a href="#博客于我，不只是写字" class="headerlink" title="博客于我，不只是写字"></a>博客于我，不只是写字</h2><ul><li>它记录了我踩过的坑、解决的问题，也记录了我偶尔的思考和小幸运。  </li><li>每一篇文章，像一张张便签，贴在生活这堵墙上。  </li><li>有时是技术总结，有时是碎碎念，但它们都很真实。</li></ul><p> <strong>我不着急被看见，只想把生活的热度、技术的温度和思维的深度，都一一安放在这里。</strong></p><h2 id="博客是我数字世界的“房间”"><a href="#博客是我数字世界的“房间”" class="headerlink" title="博客是我数字世界的“房间”"></a>博客是我数字世界的“房间”</h2><ul><li>我决定它的主题颜色  </li><li>我定义它的结构、布局和语言风格  </li><li>我在这里写字，不为取悦谁，只为留下痕迹</li></ul><p> <strong>在这个博客里，我可以不用社交滤镜，可以忘掉算法推荐，可以慢慢打下每一个字符。</strong></p><h2 id="写给未来的我"><a href="#写给未来的我" class="headerlink" title="写给未来的我"></a>写给未来的我</h2><p>或许多年后回看今天写下的文字，会觉得稚嫩，也可能会觉得温柔。但不管怎样，这是我此刻真实的记录。<br>不是为了流量，不是为了点赞，<strong>只是为了不忘记自己在成长路上的样子。</strong></p><hr><p>非常欢迎你走进这里。泡一杯热茶，翻一翻字句，若有共鸣，请留下只言片语，我们慢慢聊。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>个人博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
